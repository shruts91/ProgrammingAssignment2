
## Put comments here that give an overall description of what your
## functions do
##this function Caches matrix and generates a special list


## Write a short comment describing this function
##sets "m" to be given the value of inverse later as a NULL
##describes "m" in set function environment
##and later "m" is given the value of inverse
## a list is generated at the end of function
makeCacheMatrix<- function(x = matrix()) {
  m <- NULL
  set <- function(y) {
    x <<- y
    m <<- NULL
  }
  get <- function() x
  setInverse <- function(inverse) m <<-inverse
  getInverse <- function() m
  list(set = set, get = get,
       setInverse = setInverse,
       getInverse = getInverse)
}
## Write a short comment describing this function
##CacheSolve first checks if inverse matrix is availabe
##if not then computes the inverse matrix in latter part of the function
CacheSolve<-function(x=matrix()){
  m<- x$getInverse()
  if(!is.null(m)){
    message("getting cached data")
    return(inverse)
  }
  data<-x$getInverse()
  m<-inverse(data,...)
  x$setInverse(m)
  return(m)
}

